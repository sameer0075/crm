// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  roleId    String   @db.Uuid
  role      role     @relation(fields: [roleId], references: [id])
  comments comments[]
  company   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model role {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?
  key         String?
  users       user[]
}

model comments {
  id        String   @id @default(uuid()) @db.Uuid
  comment   String
  userId    String   @db.Uuid
  recordId  String   @db.Uuid
  user      user     @relation(fields: [userId], references: [id]) // Many-to-one relation with User
  record    records   @relation(fields: [recordId], references: [id]) // Many-to-one relation with Record
  createdAt DateTime @default(now())
}

model records {
  id          String  @id @default(uuid()) @db.Uuid
  firstName String
  lastName String
  fullName  String
  title String?
  email String
  company String
  phone String
  type  String
  status String @default("ACTIVE")
  website String
  industry String?
  lead_source String @default("EMAIL")
  stage String? // for deals
  date DateTime?
  city String?
  state String?
  country String?
  company_linkedin_url String?
  linkedin_profile String?
  comments    comments[]
  logs    activity_logs[]
  is_active Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model activity_logs {
  id                  String       @id @default(uuid()) @db.Uuid
  type                String
  logType             String
  recordId            String?       @db.Uuid
  record              records?       @relation(fields: [recordId], references: [id])
  notFoundText        String?
  createdAt           DateTime     @default(now()) @db.Timestamp(6)
  emailLog            email_log[]
  openPhoneLogs       openphone_phone_log[]
  openMessageLogs     openphone_message_log[]

  @@unique([recordId, logType])
  @@index([type, recordId])
}

model email_log {
  id        String   @id @default(uuid()) @db.Uuid
  emailText String
  logId String @db.Uuid
  log    activity_logs   @relation(fields: [logId], references: [id])
}

model openphone_phone_log {
  id                  String   @id @default(uuid()) @db.Uuid
  openphoneId         String
  openPhoneVersion    String
  eventCreation       DateTime
  callId              String
  callFrom            String
  callTo              String
  callDirection       String
  callStatus          String
  callUserId          String
  callPhoneNumberId   String
  callConversationId  String
  openPhoneJson       Json
  logId String @db.Uuid
  log    activity_logs   @relation(fields: [logId], references: [id])
}

model openphone_message_log {
  id                  String   @id @default(uuid()) @db.Uuid
  openphoneId         String
  openPhoneVersion    String
  eventCreation       DateTime
  messageId              String
  messageFrom            String
  messageTo              String
  messageDirection       String
  messageBody         String
  messageMedia  Json?
  messageStatus          String
  messageUserId          String
  messagePhoneNumberId   String
  messageConversationId  String
  messagePhoneJson       Json
  logId String @db.Uuid
  log    activity_logs   @relation(fields: [logId], references: [id])
}
