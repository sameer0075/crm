// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  password  String
  roleId    String   @db.Uuid
  role      role     @relation(fields: [roleId], references: [id])
  comments comments[]
  company   String?
  phone     String?
  smtpSettings user_smtp_settings?
  records records[]
  logs activity_logs[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user_smtp_settings {
  id        String   @id @default(uuid()) @db.Uuid
  email_name   String
  email_from   String
  email_password String
  userId    String   @db.Uuid   @unique
  user      user     @relation(fields: [userId], references: [id])
}

model role {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?
  key         String?
  users       user[]
}

model record_status {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  statusFor   String
  createdAt DateTime @default(now())
  statusCode  Int @default(autoincrement())
  records     records[]
}

model FollowUpSettings {
  id     String    @id @default(uuid()) @db.Uuid
  round  Int    // Round number (1, 2, 3, etc.)
  time   Int    // Time in hours (e.g., 24, 48, 168 for 1 week)
  unit   String // Time unit ('seconds', 'minutes', 'hours')
}

model comments {
  id        String   @id @default(uuid()) @db.Uuid
  comment   String
  userId    String   @db.Uuid
  recordId  String   @db.Uuid
  user      user     @relation(fields: [userId], references: [id]) // Many-to-one relation with User
  record    records   @relation(fields: [recordId], references: [id]) // Many-to-one relation with Record
  createdAt DateTime @default(now())
}

model records {
  id          String  @id @default(uuid()) @db.Uuid
  firstName String
  lastName String
  autoNumber Int @default(autoincrement())
  statusCode  Int @default(autoincrement())
  fullName  String?
  title String?
  email String
  company String
  phone String
  type  String
  status String @default("ACTIVE")
  recordStatusId    String?  @db.Uuid
  recordStatus  record_status? @relation(fields: [recordStatusId], references: [id])
  website String
  industry String?
  lead_source String @default("EMAIL")
  stage String? // for deals
  date DateTime?
  city String?
  state String?
  country String?
  company_linkedin_url String?
  linkedin_profile String?
  lastContacted  DateTime?
  visibleAfter   DateTime?
  round          Int?
  comments    comments[]
  logs    activity_logs[]
  userId  String? @db.Uuid
  user    user?     @relation(fields: [userId], references: [id]) // Many-to-one relation with User
  is_active Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model activity_logs {
  id                  String       @id @default(uuid()) @db.Uuid
  type                String // email,phone,message,comment
  openPhoneType       String?
  logType             String
  recordId            String?       @db.Uuid
  emailText String?
  openphoneId         String?
  openPhoneVersion    String?
  eventCreation       DateTime?
  messageCallId              String?
  callDuration  String?
  from            String?
  to              String?
  direction       String?
  status          String?
  openPhoneUserId          String?
  phoneNumberId   String?
  conversationId  String?
  body    String? //for message type
  media   Json?  // for message type
  audio   Json?
  userId  String? @db.Uuid
  user    user?     @relation(fields: [userId], references: [id]) // Many-to-one relation with User
  eventPayload  Json?
  record              records?       @relation(fields: [recordId], references: [id])
  notFoundText        String?
  createdAt           DateTime     @default(now()) @db.Timestamp(6)
}

model failed_activity_logs {
  id                  String       @id @default(uuid()) @db.Uuid
  failMessage         String
  openPhonePayload    Json
}
